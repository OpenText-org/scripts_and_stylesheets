<?xml version="1.0"?><xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:wg="http://www.opentext.org/ns/word-group" xmlns:cl="http://www.opentext.org/ns/clause" xmlns:pl="http://www.opentext.org/ns/paragraph" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:sql="http://apache.org/cocoon/SQL/2.0"         xmlns:xalan="http://xml.apache.org/xalan"                   exclude-result-prefixes="xalan">	<!-- 			#clause { position: absolute; left: 10px; top:10px; width: 95%; height: 20%; overflow: auto;} 			#comments { position: absolute; left: 10px; top: 52%; width: 95%; height: 40%; overflow: auto;} 			#form { position: absolute; left: 10px; top: 24%; width: 95%; height: 25%;  overflow: auto; 				border-top: solid 1px black; 				} -->			<xsl:param name="xpath"/>		<xsl:param name="linked">on</xsl:param>		<xsl:param name="book">John </xsl:param>		<xsl:template match="/">		<html>			<head>				<style type="text/css"> 									 			.odd { background-color: #d6ffc4;} 			.even { background-color: #ffffdd;} 			 			#comments {position: relative; overflow: auto; height: 50%; 				border: solid 2px outset; 				} 			#form {background-color: #e0f0d0;} 				 			.label { font-family: Verdana; font-size: 12px; text-align: left;} 					 					 			#clause { position: absolute; width:80%; height: 95%; overflow: auto;}		 			#domwindow { position: absolute; left: 82%; 		 							 					}		 							 			.domain { margin-bottom: 6px; font-family: Arial; font-size: 10pt; }		 		</style>		 				 		<xsl:if test="$linked = 'on'">		 			<script>		 					 					 				<![CDATA[		 					 					 			 var SD = new Array('---', '1: Geographical Objects and Features', '2: Natural Substances', '3: Plants', '4: Animals', '5: Foods and Condiments', '6: Artifacts', '7: Constructions', '8: Body, Body Parts, and Body Products', '9: People', '10: Kinship Terms', '11: Groups and Classes of Persons', '12: Supernatural Beings and Powers', '13: Be, Become, Exist, Happen', '14: Physical Events and States', '15: Linear Movement', '16: Non-Linear Movement', '17: Stances and Events Related to Stances', '18: Attachment', '19: Physical Impact', '20: Violence, Harm, Destroy, Kill', '21: Danger, Risk, Safe, Save', '22: Trouble, Hardship, Relief', '23: Physiological Processes and States', '24: Sensory Events and States', '25: Attitudes and Emotions', '26: Psychological Faculties', '27: Learn', '28: Know', '29: Memory and Recall', '30: Think', '31: Hold a View, Believe, Trust', '32: Understand', '33: Communication', '34: Association', '35: Help, Care For', '36: Guide, Discipline, Follow', '37: Control, Rule', '38: Punish, Reward', '39: Hostility, Strife', '40: Reconciliation, Forgiveness', '41: Behavior and Related States', '42: Perform, Do', '43: Agriculture', '44: Animal Husbandry, Fishing', '45: Building, Constructing', '46: Household Activities', '47: Activities Involving Liquids or Masses', '48: Activities Involving Cloth', '49: Activities Involving Clothing and Adorning', '50: Contests and Play', '51: Festivals', '52: Funerals and Burial', '53: Religious Activities', '54: Maritime Activities', '55: Military Activities', '56: Courts and Legal Procedures', '57: Possess, Transfer, Exchange', '58: Nature, Class, Example', '59: Quantity', '60: Number', '61: Sequence', '62: Arrange, Organize', '63: Whole, Unite, Part, Divide', '64: Comparison', '65: Value', '66: Proper, Improper', '67: Time', '68: Aspect', '69: Affirmation, Negation', '70: Real, Unreal', '71: Mode', '72: True, False', '73: Genuine, Phony', '74: Able, Capable', '75: Adequate, Qualified', '76: Power, Force', '77: Ready, Prepared', '78: Degree', '79: Features of Objects', '80: Space', '81: Spacial Dimensions', '82: Spacial Orientations', '83: Spacial Positions', '84: Spacial Extensions', '85: Existence in Space', '86: Weight', '87: Status', '88: Moral and Ethical Qualities Behavior', '89: Relations', '90: Case', '91: Discourse Markers', '92: Discourse Referentials', '93: Names of Persons and Places'    );		 						 				function showdomains(domains)		 				{		 					var windowHTML = "";		 					var sdomains = new Array();		 					sdomains = domains.split(':');		 					for (dom in sdomains)		 					{		 						var subdomains = sdomains[dom].substr(sdomains[dom].indexOf('-')+1);		 						var dm = sdomains[dom].substr(0,sdomains[dom].indexOf('-'));		 						windowHTML += "<div class=\"domain\">" + SD[dm] + " (" + subdomains +")</div>";		 					}			 					document.getElementById("window").innerHTML = windowHTML;		 				}		 						 				]]>		 			</script>		 		</xsl:if>			</head>			<body>				<div id="clause">					<xsl:apply-templates select="xalan:evaluate($xpath)">						<xsl:with-param name="first">true</xsl:with-param>							</xsl:apply-templates>				</div>				<div id="domwindow">					<div style="font-family: Arial; font-weight: bold; font-size: 10pt; text-decoration: underline">DOMAINS</div>					<div id="window"></div>				</div>			</body>		</html>	</xsl:template>	<xsl:template match="cl:clause">		<xsl:param name="first"/>			<xsl:variable name="id" select="@id"/>			<xsl:choose>		<xsl:when test="$first = 'true'">			<table>				<tbody>					<tr>						<th>							<xsl:value-of select="$book"/>  <xsl:value-of select=".//wg:word[1]/@ref"/>						</th>						<td>			<table border="0">			<tr>				<td valign="center">					<table border="1">						<xsl:attribute name="bgcolor"><xsl:choose><xsl:when test="@level = 'primary'">pink</xsl:when><xsl:otherwise>#e0e0e0</xsl:otherwise></xsl:choose></xsl:attribute>						<tr>							<th style="font-family: arial">								<xsl:value-of select="@id"/>							</th>							<xsl:apply-templates/>												</tr>					</table>				</td>				<td valign="center">								<xsl:apply-templates select="//cl:clause[@level='secondary'][@connect=$id][ancestor::*[1]][not(parent::clauses)]"/>						</td>			</tr>		</table>						</td>					</tr>				</tbody>			</table>		</xsl:when>		<xsl:otherwise>				<table border="0">			<tr>				<td valign="center">					<table border="1">						<xsl:attribute name="bgcolor"><xsl:choose><xsl:when test="@level = 'primary'">pink</xsl:when><xsl:otherwise>#e0e0e0</xsl:otherwise></xsl:choose></xsl:attribute>						<tr>							<th style="font-family: arial">								<xsl:value-of select="@id"/>							</th>							<xsl:apply-templates/>												</tr>					</table>				</td>				<td valign="center">								<xsl:apply-templates select="//cl:clause[@level='secondary'][@connect=$id][ancestor::*[1]][not(parent::clauses)]"/>						</td>			</tr>		</table>		</xsl:otherwise>				</xsl:choose>					</xsl:template>	<xsl:template match="cl:S|cl:P|cl:A|cl:C">			<xsl:choose>			<xsl:when test="ancestor::*[1][local-name() = 'S' or local-name() = 'C' or local-name() = 'A' or local-name() = 'P']">				<table border="1">					<td style="font-family: 'Georgia Greek'" valign="top">						<table border="0">							<tr>								<th style="font-family: arial; font-size: 10pt">									<center>										<xsl:value-of select="local-name()"/>									</center>								</th>							</tr>							<tr>								<td>									<xsl:apply-templates select="text()|*[not(@connect)]"/>																	</td>							</tr>						</table>					</td>				</table>			</xsl:when>			<xsl:otherwise>				<td style="font-family: 'Georgia Greek'" valign="top">					<table border="0">						<tr>							<th style="font-family: arial; font-size: 10pt">								<center>									<xsl:value-of select="local-name()"/>								</center>							</th>						</tr>						<tr>							<td>									<xsl:apply-templates select="text()|*[not(@connect)]"/>																	</td>						</tr>					</table>				</td>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<xsl:template match="pl:conj">		<xsl:choose>			<xsl:when test="ancestor::*[1][local-name() = 'S' or local-name()='A' or local-name()='C' or local-name()='P']">				<span style="text-decoration: underline; font-family: 'Georgia Greek'">					<xsl:apply-templates/>				</span>			</xsl:when>			<xsl:otherwise>				<td style="text-decoration: underline; font-family: 'Georgia Greek'">					<xsl:apply-templates/>				</td>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<xsl:template match="cl:conj">		<xsl:choose>			<xsl:when test="ancestor::*[1][local-name() = 'S' or local-name()='A' or local-name()='C' or local-name()='P']">				<table>					<tr>						<th>							<xsl:text/>						</th>					</tr>					<tr>						<td>							<xsl:apply-templates/>						</td>					</tr>				</table>			</xsl:when>			<xsl:otherwise>				<td style="font-family: 'Georgia Greek'">					<table>						<tr>							<th>								<xsl:text/>							</th>						</tr>						<tr>							<td>								<xsl:apply-templates/>							</td>						</tr>					</table>				</td>			</xsl:otherwise>		</xsl:choose>	</xsl:template>		<xsl:template match="wg:word">		<xsl:choose>			<xsl:when test="$linked = 'on'">				<span>					<xsl:attribute name="onmouseover">showdomains('<xsl:for-each select="sem/dom"><xsl:value-of select="@majorNum"/>-<xsl:value-of select="@subNum"/><xsl:if test="not(position()=last())"><xsl:text>:</xsl:text></xsl:if></xsl:for-each>')</xsl:attribute>										<xsl:value-of select="wf"/>				</span>			</xsl:when>			<xsl:otherwise>				<xsl:value-of select="wf"/>			</xsl:otherwise>		</xsl:choose>			</xsl:template>		</xsl:stylesheet>